before_script:
  ## docker login
  - docker login -u $REGISTRY_USER -p $REGISTRY_PASS

stages:
  - build
  - deploy

build-image-prod:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - docker build -t $REGISTRY_USER/$PROJECT_NAME-$PROD_IMAGE:$PROD_TAG .
    - docker push $REGISTRY_USER/$PROJECT_NAME-$PROD_IMAGE:$PROD_TAG
  only:
    - main

build-image-staging:
  stage: build
  script:
    - docker build --rm -t $REGISTRY_USER/$PROJECT_NAME/$STAGING_IMAGE:$STAGING_TAG .
    - docker push $REGISTRY_USER/$PROJECT_NAME/$STAGING_IMAGE:$STAGING_TAG
  only:
    - staging-branch

deploy-prod:
  stage: deploy
  before_script:
    - chmod 400 $SSH_KEY
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY $PROD_SERVER_USER@$PROD_SERVER_HOST "
          docker pull $REGISTRY_USER/$PROJECT_NAME-$PROD_IMAGE:$PROD_TAG && 
          docker stop $PROD_CONTAINER_NAME || true && 
          docker rm $PROD_CONTAINER_NAME || true &&
          docker run -d --name $PROD_CONTAINER_NAME -p 3000:3000 $REGISTRY_USER/$PROJECT_NAME-$PROD_IMAGE:$PROD_TAG"
  only:
    - main

deploy-staging:
  stage: deploy
  before_script:
    - chmod 400 $SSH_KEY
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY $STAGING_SERVER_USER@$STAGING_SERVER_HOST "
          docker pull $REGISTRY_USER/$PROJECT_NAME/$STAGING_IMAGE:$STAGING_TAG &&  
          docker run -d --rm --name $STAGING_CONTAINER_NAME -p 8000:8000 $REGISTRY_USER/$PROJECT_NAME/$STAGING_IMAGE:$STAGING_TAG"
  only:
    - staging-branch
